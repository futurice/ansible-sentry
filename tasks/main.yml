---
- action: apt pkg={{item}} state=installed
  with_items: apt_packages

- name: Git Deploy
  when: git_repo != ''
  include: ../../futurice.release/tasks/git_deploy.yml

- pip: name=virtualenv
- pip: requirements="{{release_path}}requirements.txt" virtualenv="{{release_venv}}"
  register: pip_result
  ignore_errors: True

- name: Install latest Sentry, when no requirements.txt provided
  pip: name=Sentry virtualenv="{{release_venv}}"
  when: pip_result|failed

- stat: path="{{sentry_config}}"
  register: result_sentry_config

- shell: "{{release_venv}}bin/sentry init {{sentry_config}}"
  when: not result_sentry_config.stat.exists

- shell: "{{release_venv}}bin/sentry --config={{sentry_config}} upgrade --noinput"
  async: 60
  poll: 5

- template: src=setup.py dest="{{release_path}}setup.py" mode=0755
  register: result_setup

- shell: "{{release_venv}}bin/python setup.py"
  args:
    chdir: "{{release_path}}"
  when: result_setup.changed

- template: src=supervisor.conf dest="{{supervisor_conf_dir}}sentry_supervisor.conf"
  notify: reload and restart supervisor for project

# APACHE
- include: ../../futurice.apache/tasks/main.yml
  when: sentry_using_apache

- template: src=apache.conf dest="{{apache_sites_dir}}sentry.conf"
  become_user: root
  when: sentry_using_apache
  notify:
      - restart apache

- apache2_module: state=present name={{item}}
  become_user: root
  with_items:
    - wsgi
    - headers
    - proxy
    - proxy_http
  when: sentry_using_apache
  notify:
      - restart apache

# NGINX
- template: src=nginx.conf dest="{{nginx_sites_dir}}sentry.conf"
  become_user: root
  when: sentry_using_nginx
